main.py:

import os
import uvicorn
from admin import create_admin
from fastapi import FastAPI, Depends, HTTPException, Request, status
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from sqlalchemy.orm import Session
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
import models
import schemas
import auth 
from typing import List
from logger import logger
from fastapi.responses import JSONResponse
from models import User, Movie, Review, Category
from schemas import MovieCreate
import logging

app = FastAPI(debug=True)
admin = create_admin(app)
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=int(os.environ.get("PORT", 8000)))

# OAuth2 scheme for authentication
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/login")

# Define the database URL (for SQLite in this case)
SQLALCHEMY_DATABASE_URL = "sqlite:///./test.db"

# Set up the database engine, sessionmaker, and base class for ORM models
engine = create_engine(SQLALCHEMY_DATABASE_URL, connect_args={"check_same_thread": False})
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

# Create database tables (if not already created)
models.Base.metadata.create_all(bind=engine)

@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    logger.error(f"Unhandled exception: {exc}")
    return JSONResponse(status_code=500, content={"message": "Internal Server Error"})

@app.middleware("http")
async def log_requests(request: Request, call_next):
    logger.info(f"Incoming request: {request.method} {request.url}")
    response = await call_next(request)
    logger.info(f"response status:{response.status_code}")
    return response

@app.get("/")
async def hello_world():
    return {"message": "Movie Rating System API"}
# Dependency to get the database session
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

@app.get("/admin/user/list")
async def get_user_list(users: schemas.UserCreate, db: Session = Depends(get_db)):
    try:
        # Sample database fetch logic
        users = db.query(User).all()
        logger.info(f"Fetched {len(users)} users.")
        return users
    except Exception as e:
        logger.error(f"Error fetching users: {e}")
        raise HTTPException(status_code=500, detail="Internal Server Error")
# User registration endpoint
@app.post("/register", response_model=schemas.User)
def register(user: schemas.UserCreate, db: Session = Depends(get_db)):
    db_user = db.query(models.User).filter(models.User.username == user.username).first()
    if db_user:
        raise HTTPException(status_code=400, detail="Username already taken")
    hashed_password = auth.get_password_hash(user.password)
    db_user = models.User(username=user.username, hashed_password=hashed_password)
    db.add(db_user)
    db.commit()
    db.refresh(db_user)
    return db_user

# User login endpoint
@app.post("/login", response_model=schemas.Token)
def login(form_data: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db)):
    user = auth.authenticate_user(db, form_data.username, form_data.password)
    if not user:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Incorrect username or password")
    access_token = auth.create_access_token(data={"sub": user.username})
    return {"access_token": access_token, "token_type": "bearer"}

# Function to get the current user based on the token
def get_current_user(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):
    username = auth.verify_token(token)
    if username is None:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid token")
    user = db.query(models.User).filter(models.User.username == username).first()
    if user is None:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="User not found")
    return user

# Movies endpoint to get movies
@app.get("/movies", response_model=schemas.MovieListResponse)
async def get_movies(db: Session = Depends(get_db)):
    movies = db.query(models.Movie).all()
    return {"movies": movies}

# Endpoint to create a new movie
@app.post("/movies/", response_model=schemas.Movie)
async def create_movie(movie: schemas.MovieCreate, db: Session = Depends(get_db), current_user: schemas.User = Depends(get_current_user)):
    category = db.query(Category).filter(Category.id == movie.category_id).first()
    if not category:
        raise HTTPException(status_code=400, detail="Invalid category ID")
    db_movie = models.Movie(id=movie.id, title=movie.title, genre=movie.genre, year=movie.year, user_id=current_user.id, category_id=movie.category_id)
    db.add(db_movie)
    db.commit()
    db.refresh(db_movie)
    return db_movie

# Endpoint to get a specific movie by ID
@app.get("/movies/{movie_id}", response_model=schemas.Movie)
async def get_movie(movie_id: int, db: Session = Depends(get_db)):
    db_movie = db.query(models.Movie).filter(models.Movie.id == movie_id).first()
    if db_movie is None:
        raise HTTPException(status_code=404, detail="Movie not found")
    return db_movie

# Endpoint to create a review for a movie
@app.post("/movies/{movie_id}/reviews", response_model=schemas.Review)
async def create_review(movie_id: int, review: schemas.ReviewCreate, db: Session = Depends(get_db), current_user: schemas.User = Depends(get_current_user)):
    db_movie = db.query(models.Movie).filter(models.Movie.id == movie_id).first()
    if db_movie is None:
        raise HTTPException(status_code=404, detail="Movie not found")

    db_review = models.Review(rating=review.rating, comment=review.comment, movie_id=movie_id, user_id=current_user.id)
    db.add(db_review)
    db.commit()
    db.refresh(db_review)
    return db_review

# Endpoint to get reviews for a specific movie
@app.get("/movies/{movie_id}/reviews", response_model=List[schemas.Review])
async def get_reviews(movie_id: int, db: Session = Depends(get_db)):
    db_movie = db.query(models.Movie).filter(models.Movie.id == movie_id).first()
    if db_movie is None:
        raise HTTPException(status_code=404, detail="Movie not found")

    reviews = db.query(models.Review).filter(models.Review.movie_id == movie_id).all()
    return reviews
